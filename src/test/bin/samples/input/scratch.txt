1,101, 101, 2, 3
1,102, 102,3,4
1,103, 103,1,1
2,101,  101,2 3
3, 102, 102, 3, 4

50, 101
50,102
50, 103
200,101
105, 102

table names  = sailors, reserves, boats
last table  = boats
right expressions = null
in expressions = Reserves.H = Boats.D
left expressions= Sailors.A = Reserves.G AND Reserves.G <= 3;

remove last table => sailors, reserves
1. leftOp = createJoinOp(Sailors.A = Reserves.G AND Reserves.G <= 3), sailors, reserves);

last table = reserves
right expression = Reserves.G <= 3
inExpression = Sailors.A = Reserves.G
left expresson = null
table names size = 2
joinOp = join two tables( {Sailors, reserves}, Reserves.G <= 3, null, Sailors.A = Reserves.G)
leftexp =  null
rightexp = Reserves.G <= 3
inexp = Sailors.A = Reserves.G

left table= sailors, right table  = reserves
left op = scan(sailors)
right op = select(reserves, Reserves.G <= 3)
1***. leftOp = return JoinoP(sailors reserve schema, left op, right op, Sailors.A = Reserves.G)

now return to 1
left schema is sailors, reserves
right schema = boats

new join ({join schema is sailors, reserves, boats}. 1****.,  2**scan(boats), Reserves.H = Boats.D)


new ProjOperator({sailors, reserves, boats},  new join operator,  Sailors.C, Reserves.H

childOP = join operator
={join schema is sailors, reserves, boats}. 1****.,  2**scan(boats), Reserves.H = Boats.D)
joinOperator.getNextTuple()
    calls leftTuple on JoinOP(sailors reserve schema, scan(sailors),
                        select(reserves, Reserves.G <= 3), Sailors.A = Reserves.G)
    left tuple is tuple (A,B,C, G,H)
    checks if Reserves.H = Boats.D

H==D
1,200,50 and 1,101 => (1,200,50,1,101) left tuple
D E F
right boats 101,2,3 =>(101,2,3) 101=101
 return (1,200,50,1,101, 101, 2, 3)   1!=3 not checking the Reserves.H = Boats.D
 reset right operator scan boats, get next left (1,200, 50, 1, 102)



